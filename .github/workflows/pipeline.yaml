name: 'Terraform Deploy'

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  TERRAFORM_DIR: terraform
  DB_USERNAME: postgres
  DB_PASSWORD: postgres

jobs:
  install:
    name: 'Install dependencies and build'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build Lambda functions
        run: npm run build:lambda

      - name: Package Lambda functions
        run: npm run package:lambda

      - name: List dist
        run: ls -R dist

  terraform-validate:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: install
    permissions:
      contents: read
      pull-requests: write

    env:
      AWS_REGION: us-east-1
      DB_USERNAME: postgres
      DB_PASSWORD: postgres

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure Terraform variables
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "TF_VAR_db_username=${{ env.DB_USERNAME }}" >> $GITHUB_ENV
          echo "TF_VAR_db_password=$DB_PASSWORD" >> $GITHUB_ENV
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Init
        run: |
          cd terraform
          if [ -f backend.conf ]; then
            terraform init -backend-config=backend.conf
          else
            terraform init
          fi

      - name: Terraform Validate
        run: cd terraform && terraform validate

      - name: Terraform Format
        id: fmt
        run: cd terraform && terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: cd terraform && terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true

      - name: Update Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    environment: prod
    needs: terraform-validate
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build Lambda functions
        run: npm run build:lambda

      - name: Package Lambda functions
        run: npm run package:lambda

      - name: Terraform Apply
        run: cd terraform && terraform apply -auto-approve tfplan
