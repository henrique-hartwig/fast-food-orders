service: fast-food-orders

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    NODE_ENV: ${self:provider.stage}
    DB_SECRET_ARN: ${self:custom.dbSecretArn.secret}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: ${self:custom.dbSecretArn.secret}

custom:
  dbSecretArn:
    secret: 'arn:aws:secretsmanager:us-east-1:655643325852:secret:fast-food-orders-db-password-sIHzsN'
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002

functions:
  createOrder:
    handler: src/application/handlers/createOrder.handler
    events:
      - http:
          path: /orders
          method: post
          cors: true
  
  getOrder:
    handler: src/application/handlers/getOrder.handler
    events:
      - http:
          path: /orders/{id}
          method: get
          cors: true
  
  listOrders:
    handler: src/application/handlers/listOrders.handler
    events:
      - http:
          path: /orders
          method: get
          cors: true
  
  updateOrder:
    handler: src/application/handlers/updateOrder.handler
    events:
      - http:
          path: /orders/{id}
          method: put
          cors: true
  
  deleteOrder:
    handler: src/application/handlers/deleteOrder.handler
    events:
      - http:
          path: /orders/{id}
          method: delete
          cors: true

plugins:
  - serverless-plugin-typescript
  - serverless-offline 